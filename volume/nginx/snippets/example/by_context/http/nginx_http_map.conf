map "$ssl_server_name" $preset_domain_name {
    "~^\d+\.\d+\.\d+\.\d+$"           "";
    # 匹配三级及以上域名，提取出主域名 
    "~^(?:[a-zA-Z0-9-]+\.)+(?<domain>[a-zA-Z0-9-]+\.[a-zA-Z]{2,})$"   $domain;
    # 匹配二级域名，保持不变
    "~^[a-zA-Z0-9-]+\.[a-zA-Z]{2,}$"  $ssl_server_name;
    # 匹配顶级域名，保持不变
    "~^[a-zA-Z]+$"                    $ssl_server_name;
    default                           "";
}

map "$preset_domain_name" $domain_name {
    # 这里需要添加更多的具体映射规则以限制默认行为
    # 或者直接重新写一个 map
    # 若不采取行动，可能会导致安全事故
    # 需要额外自定义 "" 的映射规则
    default    $preset_domain_name;
}

map "$domain_name" $cert_dir_name {
    # 这里需要添加更多的具体映射规则以限制默认行为
    # 或者直接重新写一个 map
    # 若不采取行动，可能会导致安全事故
    default     $domain_name;
}

map "$cert_dir_name" $path_to_cert_file {
    default     /etc/nginx/ssl/${cert_dir_name}/fullchain.pem;
}

map "$cert_dir_name" $path_to_cert_key_file {
    default     /etc/nginx/ssl/${cert_dir_name}/key.pem;
}

map "$ssl_server_name" $access_log_file_name {
    "~^(?:[a-zA-Z0-9-]+\.)*([a-zA-Z]{2,})$"     access_${ssl_server_name}.log;
    default                                     access.log;
}

map "$host" $loggable {
    default     1;
}

map "$http_upgrade" $diy_connection_upgrade {
    ""              close;
    # keep-alive    keep-alive;
    default         upgrade;
}

map "$http3" $diy_http3_compatible_host_for_proxy {
    h3          ${host}:${server_port};
    hq          ${host}:${server_port};
    default     $http_host;
}

map "${scheme}${server_port}" $diy_full_request_url {
    https443    ${scheme}://${host}${request_uri};
    http80      ${scheme}://${host}${request_uri};
    default     ${scheme}://${diy_http3_compatible_host_for_proxy}${request_uri};
}
